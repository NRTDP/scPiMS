---
title: "Assigning pathway adjusted PASscore"
subtitle: "single sample GSEA based on GSVA algorithm"
date-format: "iso"
format: html
editor: visual
toc: true
format: 
  html: default
  pdf: default
---

https://bioconductor.org/packages/release/bioc/vignettes/GSVA/inst/doc/GSVA.html

Ref: DOI: [10.1186/1471-2105-14-7](https://doi.org/10.1186/1471-2105-14-7)

## Loading packages

```{r}
.packages = c("BiocManager","devtools","plyr","dplyr","readxl","tidyverse","tidyr", "doBy","GSVA","GSVAdata","plotly","msigdb","M3C", "GSEABase", "jsonify",
              "factoextra","MASS","ggplot2","ComplexHeatmap","ggrepel",
              "org.Hs.eg.db","clusterProfiler","stringr")

# Install packages if not installed yet
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) {
  install.packages(.packages[!.inst])
  BiocManager::install(.packages[!.inst])}

# load packages if not loaded yet
lapply(.packages, require, character.only=T)
.packages[which(lapply(.packages, require, character.only=TRUE) %in% FALSE)]
```

## Loading scPiMS data

```{r}
data_dir <- "data/"   # Directory where you have the files to be uploaded

passcore <- read_excel(paste0(data_dir,"pca_input.xlsx"), sheet = "ScoreFDR",col_names = T )|>as.data.frame()|>
  mutate(CellID = paste0("Cell",CellID))|>
  rename(CellNumber=CellID)

rownames(passcore) <- passcore$CellNumber

pfr_anno <- read_excel(paste0(data_dir,"pfr_annotation.xlsx"))|>as.data.frame()

cell_anno <- read_excel(paste0(data_dir,"cell_annotation.xlsx"))|>as.data.frame()|>
  mutate(CellNumber = paste0("Cell",CellNumber))

cell_anno1 <- passcore|> dplyr::select(1:3)

```

## Enriching pfr_anno matrix

```{r}
## -----Mapping ENTREZ Ids
#keytypes(org.Hs.eg.db)

accession <- clusterProfiler::bitr(pfr_anno$EntrezID, fromType = "ENTREZID", 
                                toType = "UNIPROT", 
                                OrgDb = org.Hs.eg.db)|>rename(Accession=UNIPROT)

symbol <- clusterProfiler::bitr(pfr_anno$EntrezID, fromType = "ENTREZID", 
                                toType = "SYMBOL", 
                                OrgDb = org.Hs.eg.db)|>rename(SYMBOL=SYMBOL)

name <- clusterProfiler::bitr(pfr_anno$EntrezID, fromType = "ENTREZID", 
                                toType = "GENENAME", 
                                OrgDb = org.Hs.eg.db)|>rename(GENE_NAME=GENENAME)

df_long1<-plyr::join_all(list(accession,symbol,name), by="ENTREZID", match = "all")|>
  dplyr::rename(EntrezID = ENTREZID)

pfr_anno <- plyr::join_all(list(pfr_anno,df_long1), by="EntrezID", match = "first")


```

## Merging PAScores from PFR coded from the same gene.

Whenever gene symbols were assigned to multiple proteoforms, we merged the PAScores

```{r}
pas_merge <- function(PAS){
  
  product_term <- prod(1 - PAS)
  result <- 1 - product_term
  return(result)
}

#--------------------
data_long <- passcore|>
  pivot_longer(cols = 4:ncol(passcore),
               names_to = "PFR", 
               values_to ="PASscore")|>
  mutate(PFR = str_extract(PFR, "^[^.]+"),
         PFR = str_extract(PFR, '(?<=tv\\|).*'))|>
  group_by(PFR, CellNumber)|>
  mutate(PASscore1 = pas_merge(PASscore))|>
  arrange(desc(PASscore1))|>
  distinct(c(PFR),.keep_all = T)|>ungroup()

data_long1 <- plyr::join_all(list(data_long, pfr_anno), by="PFR")|>
  arrange(PASscore1)|>distinct(CellNumber,EntrezID, .keep_all = T)

data<- data_long1|>
  pivot_wider(id_cols = 1:3, values_from = PASscore1, names_from = EntrezID)|>
  as.data.frame()
rownames(data)<-data$CellNumber
#write.csv(data, paste0(data_dir,"passcore_m_v1.csv"),row.names = F)
```

## Data Cleaning

#### Filter of zeros values

-   We keep cells with at least 1 proteoform having score value \> 0
-   We also keep proteoforms with at least a score value \> 0 in at least one cell

```{r}
columns_with_non_scores <- data[,1:3]  # selecting columns no containing PAS score
scores_data <- as.data.frame(data[,4:ncol(data)])     # selecting columns with PAS score
rownames(scores_data)<-rownames(data)

# removing cell with no score values 
scores_data$sum <- apply(scores_data, 1, sum)
scores_data <- scores_data|>
  filter(sum != 0)|> dplyr::select(-sum)

# removing Pfr with no score values in any cell
scores_data <- scores_data|>t()|>as.data.frame()
scores_data$sum <- apply(scores_data, 1, sum)
scores_data <- scores_data|>
  filter(sum != 0)|> dplyr::select(-sum)|>t()|>as.data.frame()

```

## Collection of gene sets defined as Pathways terms

```{r}
library(GSEABase)
library(GSVAdata)

data(c2BroadSets)
class(c2BroadSets)

canonicalC2BroadSets <- c2BroadSets[c(grep("^KEGG", names(c2BroadSets)),
                                      grep("^REACTOME", names(c2BroadSets)))]
```

## GSVA analysis (single sample enrichment analysis)

```{r}
scores_data2<- as.matrix(t(scores_data))

#gsvaPar <- gsvaParam(scores_data2, genesbygo, minSize = 2, kcdf = 'none')
gsvaPar <- gsvaParam(scores_data2, canonicalC2BroadSets, minSize = 2, kcdf = 'none')

ssgseaPar <- ssgseaParam(scores_data2, canonicalC2BroadSets, minSize = 2)

```

```{r}
gsva.es <- gsva(gsvaPar,verbose=FALSE)
dim(gsva.es)
gsva.es<-as.data.frame(gsva.es)
#write.csv(gsva.es,"Output/gsva_es-2024-06-25.csv", row.names = T)
```

### Filtering the most abundant

```{r}
library(M3C)
filtered_results <- featurefilter(gsva.es, percentile=10, method='A', topN=25)  #method='MAD'
gsva.es1<-filtered_results$filtered_data
#write.csv(gsva.es1,"Output/gsva_es-2024-06-25_filtered_10percentile.csv", row.names = T)
```

### z-score by Biolog.Pathway

```{r}
gsva.es2 <- apply(gsva.es1,1,function(x){scale(x)})
rownames(gsva.es2) <- colnames(gsva.es) 

gsva.es2 <- as.data.frame(t(gsva.es2))
#boxplot(gsva.es2[1:50,1:100])
```

## Making 'Pathways_df.csv' File Results

```{r}
Pathw_list0<- gsvaPar@geneSets

Pathw_list <- Pathw_list0[rownames(gsva.es2)]

gene_list=list()
geneSymbol_list=list()
accession_list=list()

for (i in 1:length(Pathw_list)) {
  
  path <- Pathw_list[[i]]
  geneIds <- path@geneIds

  mat <- scores_data2|>as.data.frame()|>rownames_to_column("ENTREZID")|>
    rename(EntrezID = ENTREZID)|>
    dplyr::select(EntrezID)
  mat1 <- plyr::join_all(list(mat,pfr_anno), by = "EntrezID", match = "first")
  
  genes <- geneIds[geneIds %in% mat1$EntrezID]
  genesSym <- mat1[mat1$EntrezID %in% genes,"SYMBOL"]
  accession <- mat1[mat1$EntrezID %in% genes,"Accession"]
  
  gene_list[[i]] <- genes

geneSymbol_list[[i]] <- genesSym
accession_list[[i]] <- accession
}

Pathways_df <- tibble(Pathway=names(Pathw_list),
                      GeneID=gene_list, 
                      GeneSymbol = geneSymbol_list,
                      Accession_ = accession_list)

Pathways_df$Gene_Id <- apply(Pathways_df[,2], 1, function(x)to_json(x))
Pathways_df$Gene_Symbol <- apply(Pathways_df[,3], 1, function(x)to_json(x))
Pathways_df$Accession <- apply(Pathways_df[,4], 1, function(x)to_json(x))
Pathways_df <- Pathways_df[,-c(2:4)]

#write.csv(Pathways_df,"Pathways_df.csv")
```

# clusters

## Optimal number of clusters

```{r}
#determining the optimal number of clusters

factoextra::fviz_nbclust(t(gsva.es2), cluster::pam, method = "silhouette", k.max = 10) + 
  geom_vline(xintercept = 3, linetype = 2)+
  theme_minimal() + ggtitle("The Silhouette Plot ('pam')")
```

## PAM

```{r}
library(ComplexHeatmap)

pam = cluster::pam(t(gsva.es2), k = 3)
df_clust = as.data.frame(pam$clustering)
df_clust$CellNumber <- rownames(df_clust)

cell_anno<- merge(cell_anno,df_clust,by="CellNumber")

df_clust$CellNumber<-rownames(df_clust)
colnames(df_clust)[1]<-"cluster"

gsva.es2a<- as.data.frame(t(gsva.es2))
gsva.es2a$CellNumber<- rownames(gsva.es2a)
cell_type_df<- cell_anno[cell_anno$CellNumber%in%rownames(gsva.es2a),]

gsva.es3<- plyr::join_all(list(df_clust,cell_type_df,gsva.es2a), by="CellNumber")
gsva.es3<-gsva.es3|>column_to_rownames("CellNumber")
gsva.es3$cluster<- as.factor(gsva.es3$cluster)

#write.csv(cell_type_df,"df_clust.csv")

```

## Heatmap

```{r}
column_ha =  HeatmapAnnotation(cluster = gsva.es3$cluster,
                               batch = gsva.es3$BatchID,
                               col = list(cluster = c("1" = "#E69F00", 
                                                        "2" = "#56B4E9",
                                                      "3" = "yellowgreen")))


mat <- as.matrix(t(gsva.es3[,7:ncol(gsva.es3)]))
rownames(mat) <- gsub("REACTOME_|KEGG_", "", rownames(mat))

ComplexHeatmap::Heatmap(mat, top_annotation = column_ha,
                        show_row_names = T,
                        row_names_gp = gpar(fontsize =8),
                        show_column_names = F,
                        cluster_rows =T,
                        cluster_columns = T,
                         na_col = "black",
                        #column_title = "Cells",
                        row_title = "Pathways",
                        name = "score",
                        column_split = paste0("", gsva.es3$cluster))
```

## PCA

```{r}
library(ggplot2)
library(MASS)
library(factoextra)
library(ggrepel)

protein_columns = 7:ncol(gsva.es3)
ind_col=gsva.es3$cluster
target_cell <- gsva.es3 %>%
  filter(Cell_type!="unknown")


fit_pca <- prcomp(gsva.es3[,protein_columns],center = TRUE, scale = TRUE)

plot(fit_pca, type="l")



# PLOTSS

fviz_pca_biplot(fit_pca,geom.ind="point", pointsize = 1.5,
                label="var",repel = T,
                col.var = "#E99999", #  "#E99999"
                alpha.ind = 0.7,
                habillage=as.factor(ind_col),
                palette = c("#E69F00", "#56B4E9","yellowgreen"))+
  labs(title ="PCA - Biplot")+
  ggrepel::geom_text_repel(aes(label = ifelse(gsva.es3$Cell_type != "unknown",
                                        as.character(gsva.es3$Cell_type),"")),
                      size = 4, max.overlaps = 4000)

fviz_pca_ind(fit_pca,geom.ind="point", pointsize = 1.5,
                label="var",repel = T,
                col.var = "#E99999", #  "#E99999"
                alpha.ind = 0.7,
                habillage=as.factor(ind_col),
                palette = c("#E69F00", "#56B4E9","yellowgreen"))+
  labs(title ="PCA")+
  ggrepel::geom_text_repel(aes(label = ifelse(gsva.es3$Cell_type != "unknown",
                                        as.character(gsva.es3$Cell_type),"")),
                      size = 4, max.overlaps = 4000)

```

## tSNE

```{r}

## calling the installed package
train <- gsva.es3 ## Choose the train.csv file downloaded from the link above  
colnames(train)[1]<-"Clusters"
library(Rtsne)
## Curating the database for analysis with both t-SNE and PCA
Labels<-train$Clusters
train$Clusters <-as.factor(train$Clusters)
## for plotting
colors = rainbow(length(unique(train$Clusters)))
names(colors) = unique(train$Clusters)

## Executing the algorithm on curated data
tsne <- Rtsne(train[,7:ncol(train)], dims = 2, perplexity=45, 
              check_duplicates = F,
              verbose=TRUE, max_iter = 500)

exeTimeTsne<- system.time(Rtsne(train[,6:ncol(train)], dims = 2, perplexity=45,
                                check_duplicates = F,
                                verbose=TRUE, max_iter = 500))
```

```{r}
tsne_df <- as.data.frame(tsne$Y)
colnames(tsne_df)<-c("tSNE_1", "tSNE_2")

colors=c("#E69F00", "#56B4E9","yellowgreen")

ggplot(tsne_df, aes(x = tSNE_1, y = tSNE_2, colour = train$Clusters)) +
  geom_point()+
  labs(x = "tSNE_1",
       y = "tSNE_2",
      subtitle = "tSNE plot")+
  scale_color_manual(values = c("#E69F00", "#56B4E9","yellowgreen"))+
  theme_bw()
```


## UMAP

```{r}
library(umap)
theme_set(theme_bw(18))

umap_df <- gsva.es3[,7:ncol(gsva.es3)]
umap_meta <- gsva.es3[,1:6]
umap_meta$Cell<- rownames(umap_meta)

set.seed(142)
umap_fit <- umap_df |> umap()

```


```{r}

umap_df1 <- umap_fit$layout |>
  as.data.frame()|>
  rename(UMAP1="V1",
         UMAP2="V2") |> rownames_to_column("Cell")|>
  inner_join(umap_meta, by="Cell")
```

__Plot__
```{r}
umap_df1 %>%
  ggplot(aes(x = UMAP1, 
             y = UMAP2, 
             color = cluster))+
  geom_point()+
  labs(x = "UMAP1",
       y = "UMAP2",
      subtitle = "UMAP plot")+
  scale_color_manual(values = c("#E69F00", "#56B4E9","yellowgreen"))+
  theme_bw()
#ggsave("UMAP_plot_example1.png")
```
